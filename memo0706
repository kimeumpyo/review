컴포넌트
  함수형 컴포넌트
  클래스형 컴포넌트
  
  속성 -> 컴포넌트 매개변수 props
      -> 태그 사이에 입력된 값 : props.children
  
  속성의 기본값
    .defaultProps = {
      기본값 속성명 : 기본값,

      ...
    }

  자료형의 제한
    prop-types 모듈

    improt...from '설치된 모듈';

      Proptypes.자료형 
      Proptypes.자료형.isRequired :필수 항목 

  state
    - 컴포넌트 내부에서 변경될 수 있는 값
    - 직접 객체의 속성값을 변경 X
    - 별도의 메서드를 가지고 변경
      setState(변경된 state 객체)

      참고)
      props, state의 값이 변경 -> render()호출 -> 화면 갱신

  함수형 컴포넌트 
    useState(....)
      -> 배열 객체
        0 : 상태 변화 변수
        1 : 상태 변화 함수

      예) 변경가능

      const obj = { state : 100 };

      Object.getOwnPropertyDescriptor(obj, 'state')
      
      => 
          configurable : true
          enumerable : true
          value : 100
          writable : true

      obj.state = 101;

      obj;
      =>

      delete obj.state;
      => true

      obj;
      =>

      예)변경불가

      const obj = { state : 100 };

      Object.defineProperty(obj, "state",{
        writable: false, // 변경불가
        configurable : false // 삭제불가
        enumerable : flase // 반복불가
      })
      obj;
      =>

      obj.state = 101;

      obj;
      =>

      dlelete. obj.state;
      => false

      for(const key in obj){
        console.log(key);
      }
      =>nudefinds

  상속
    - 객체간의 상속
    - 프로토타입 체인의 연결
      [[Prototype]]

      __proto__

      -> 

      예)

      const obj1 = {a: 1, b:2};
      const obj2 = {c: 3, d:4};

      obj1.__proto__ = obj2;

      obj1;
      =>

      obj1.c;
      =>

      obj1.d;
      =>

      예)
      funciton ...{

      }
      -> new Function(..., ...);

    생성자 함수 객체 -> 객체
      new 연산자
        - 상속의 과정 (생성자 함수 객체.prototype 객체의 상속)

      예)
      function Person(){

      }
      const p1 = new Person(); // 객체화

      p1;

      예)
      function Person(){

      }
      console.dir(Person);
      => ƒ Person()

      const p1 = new Person();

      p1;
      => Person {}

      예)
      function Person(){

      }
      const p1 = {};
      p1;
      =>{}

      p1.__proto__ = Person.prototype;
      => {constructor: ƒ}

      p1;
      => Person {}

      예)
      function Person(){
          this.name = "아이유"
          this.age = 40
      }

      const p1 ={};

      Object.setPrototypeOf(p1, Person.prototype);
      => Person {}

      Person.apply(p1);

      p1;
      => Person {name: '아이유', age: 40}

    생성자 함수객체간 상속
      - 생성자 함수.prototype간의 상속


      예)
      function Person(){
          this.name = "아이유"
          this.age = 40
          this.swowInfo = funciton(){
            console.log(this.name, this.age);
          }
      }

      const p1 = new Person();

      p1;

      const p2 = new Person();

      p2;

      p1.showInfo === p2.showInfo;

      => false

    타원 Ellipse
    예)
    function Ellipse(a, b){
      this.a = a;
      this.b = b;
    }

    Ellipse.prototype.getArea = function(){
      return this.a * this.b * Math.PI;
    }

    Ellipse.staticMethod = function(){
      console.log("static!");
    }

    Ellipse.staticMethod();
    => static!

    예)
    function Circle(r){
      this.a = r;
      this.b = r;
    }

    Object.setPrototypeOf(Circle.prototype, Ellipse.prototype);

    console.dir(Circle);

    const c1 = new Circle(10);

    c1.getArea();
    => 314.1592653589793
    c1;
    => Circle {a: 10, b: 10}


    참고)
    {...변수명} => 객체를 복사 (주소값이 다르다!) 고로 person === person2 는 false 가 나온다

    const person { name : "아이유", age : 40};

    const person2 = {...person, name : "김이유" };

    person2;
    =>

  참고)

    function add (num1, num2){
      return num1 + num2;
    }

    const nums = [10, 20];

    add(...nums);

    => 30

    



      



      

      

      



